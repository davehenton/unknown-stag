00f7430b25a1bb4174f0c6bc48cba7ab
'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/buddy/unknown-stag/src/components/UnestimatedIssue/UnestimatedIssue.js';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _fire = require('../../fire');var _fire2 = _interopRequireDefault(_fire);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

class Issue extends _react.Component {
    constructor(props) {
        super(props);
        this.state = {
            estimates: {} };

        this.updateIssue = this.updateIssue.bind(this);
        this.removeIssue = this.removeIssue.bind(this);
        this.submitEstimate = this.submitEstimate.bind(this);
    }
    componentWillMount() {
        let refEstimates = _fire2.default.database().ref('estimates/' + this.props.id);
        refEstimates.on('child_added', snapshot => {
            let estimate = {
                points: snapshot.val().points,
                id: snapshot.key,
                photo: snapshot.val().creator_photoURL,
                name: snapshot.val().creator_displayName };

            if (snapshot.val().creator_uid === _fire2.default.auth().currentUser.uid) {
                this.inputS1.value = estimate.points;
            }
            let estimates = this.state.estimates;
            estimates[snapshot.key] = estimate;
            this.setState({ estimates });
        });
    }
    updateIssue(e) {
        _fire2.default.database().ref('issues').child(this.props.id).update({
            estimated: !this.props.estimated }).
        then(() => {}, error => {
            console.log(error);
        });
    }
    removeIssue(e) {
        let ref = _fire2.default.database().ref('issues');
        let rmIssue = window.confirm("You are about to delete this issue!");
        if (rmIssue) {
            ref.child(this.props.id).remove().then(() => {}, error => {
                console.log(error);
            });
        }
    }
    submitEstimate(e) {
        e.preventDefault();
        let p = 0;
        if (this.inputS1) {
            p = this.inputS1.value;
        }
        let newEstimate = _fire2.default.database().ref('estimates/' + this.props.id + '/' + _fire2.default.auth().currentUser.uid);
        return newEstimate.set({
            uid: newEstimate.key,
            points: p,
            creator_photoURL: _fire2.default.auth().currentUser.photoURL,
            creator_displayName: _fire2.default.auth().currentUser.displayName,
            creator_uid: _fire2.default.auth().currentUser.uid }).
        then(() => {
            return _fire2.default.database().ref('estimates').child(this.props.id).once('value').then(snapshot => {
                let estimates = Object.values(snapshot.val());
                let sum = 0;
                estimates.forEach(element => {
                    sum += parseInt(element.points, 10);
                });
                let average = Math.ceil(sum / estimates.length);
                let issueRef = _fire2.default.database().ref('issues/' + this.props.id);
                return issueRef.update({
                    average: average });

            });
        }).catch(e => {
            console.log(e);
        });
    }
    render() {
        return (
            _react2.default.createElement('li', { className: 'collection-item', __source: { fileName: _jsxFileName, lineNumber: 79 }, __self: this },
                _react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 80 }, __self: this }, this.props.title,
                    _react2.default.createElement('a', { href: '', onClick: e => this.submitEstimate(e), title: 'confirm estimate', className: 'secondary-content', __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this }, _react2.default.createElement('i', { className: 'material-icons', __source: { fileName: _jsxFileName, lineNumber: 81 }, __self: this }, 'done')),
                    _react2.default.createElement('a', { href: '', onClick: e => this.updateIssue(e), hidden: !this.props.owner, title: 'toggle done', className: 'secondary-content', __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this }, _react2.default.createElement('i', { className: 'material-icons', __source: { fileName: _jsxFileName, lineNumber: 82 }, __self: this }, 'compare_arrows')),
                    _react2.default.createElement('a', { href: '', onClick: e => this.removeIssue(e), hidden: !this.props.owner, title: 'delete issue', className: 'secondary-content', __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this }, _react2.default.createElement('i', { className: 'material-icons', __source: { fileName: _jsxFileName, lineNumber: 83 }, __self: this }, 'delete_forever')),
                    _react2.default.createElement('form', { __source: { fileName: _jsxFileName, lineNumber: 84 }, __self: this },
                        _react2.default.createElement('p', { className: 'range-field', __source: { fileName: _jsxFileName, lineNumber: 85 }, __self: this },
                            _react2.default.createElement('input', { type: 'range', min: '1', max: '10', ref: s1 => this.inputS1 = s1, __source: { fileName: _jsxFileName, lineNumber: 86 }, __self: this }))),


                    Object.values(this.state.estimates).map(estimate =>
                    _react2.default.createElement('div', { className: 'chip', key: estimate.id, title: estimate.name, __source: { fileName: _jsxFileName, lineNumber: 90 }, __self: this },
                        _react2.default.createElement('img', { src: estimate.photo, alt: 'img', __source: { fileName: _jsxFileName, lineNumber: 91 }, __self: this }), '?')))));






    }}exports.default =

Issue;